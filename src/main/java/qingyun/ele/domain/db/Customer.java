package qingyun.ele.domain.db;
// Generated 2017-4-17 14:45:18 by Hibernate Tools 3.2.2.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Customer generated by hbm2java
 */
@Entity
@Table(name="customer"
    ,catalog="ele"
)
public class Customer  implements java.io.Serializable {


     private Long id;
     private SubSubLocation subSubLocation;
     private Dic dic;
     private String name;
     private String address;
     private String code;
     private String project;
     private Date start;
     private Date end;
     private Set<So> sos = new HashSet<So>(0);
     private Set<ProjectSteps> projectStepses = new HashSet<ProjectSteps>(0);
     private Set<Loan> loans = new HashSet<Loan>(0);

    public Customer() {
    }

    public Customer(SubSubLocation subSubLocation, Dic dic, String name, String address, String code, String project, Date start, Date end, Set<So> sos, Set<ProjectSteps> projectStepses, Set<Loan> loans) {
       this.subSubLocation = subSubLocation;
       this.dic = dic;
       this.name = name;
       this.address = address;
       this.code = code;
       this.project = project;
       this.start = start;
       this.end = end;
       this.sos = sos;
       this.projectStepses = projectStepses;
       this.loans = loans;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id", unique=true, nullable=false)
    public Long getId() {
        return this.id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_sub_sub_loc")
    public SubSubLocation getSubSubLocation() {
        return this.subSubLocation;
    }
    
    public void setSubSubLocation(SubSubLocation subSubLocation) {
        this.subSubLocation = subSubLocation;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="status")
    public Dic getDic() {
        return this.dic;
    }
    
    public void setDic(Dic dic) {
        this.dic = dic;
    }
    
    @Column(name="name", length=64)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name="address", length=128)
    public String getAddress() {
        return this.address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }
    
    @Column(name="code", length=64)
    public String getCode() {
        return this.code;
    }
    
    public void setCode(String code) {
        this.code = code;
    }
    
    @Column(name="project", length=64)
    public String getProject() {
        return this.project;
    }
    
    public void setProject(String project) {
        this.project = project;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="start", length=19)
    public Date getStart() {
        return this.start;
    }
    
    public void setStart(Date start) {
        this.start = start;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="end", length=19)
    public Date getEnd() {
        return this.end;
    }
    
    public void setEnd(Date end) {
        this.end = end;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="customer")
    public Set<So> getSos() {
        return this.sos;
    }
    
    public void setSos(Set<So> sos) {
        this.sos = sos;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="customer")
    public Set<ProjectSteps> getProjectStepses() {
        return this.projectStepses;
    }
    
    public void setProjectStepses(Set<ProjectSteps> projectStepses) {
        this.projectStepses = projectStepses;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="customer")
    public Set<Loan> getLoans() {
        return this.loans;
    }
    
    public void setLoans(Set<Loan> loans) {
        this.loans = loans;
    }




}


